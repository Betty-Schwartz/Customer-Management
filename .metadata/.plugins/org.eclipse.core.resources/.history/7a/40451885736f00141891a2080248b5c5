package com.schwartz.customerProject.customers;

import java.sql.*;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONObject;

import com.schwartz.dao.MySql_Utils;
import com.schwartz.util.ToJSON;
import com.sun.jersey.core.spi.factory.ResponseBuilderImpl;

@Path("/")
public class Customers extends MySql_Utils {
	
	/**
	 * Return all customers.
	 */
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response returnAllCustomers() throws Exception{		
			
			String returnString = null;
			Connection conn = null;
			PreparedStatement query = null;
			Response rb = null;
			try {
				conn = MySql_Utils.MySqlConn().getConnection();
				query = conn.prepareStatement("select * " +
				                              "from customers");
				
				ToJSON converter = new ToJSON();
				JSONArray json = new JSONArray();
				
				ResultSet rs = query.executeQuery();
				json = converter.toJSONArray(rs);
				
				query.close(); // close connection
				
				returnString = json.toString();
				
			  rb = Response.ok(returnString).build();
			}
			catch (SQLException sqe){
				sqe.printStackTrace();
			}
			finally {
				if ( conn != null){
					conn.close();
				}			
			}
			
			return rb;
		}
	
	/**
	 * Return a customer.
	 */
	@Path("/{id}") 
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public JSONObject queryReturnCustomer(@PathParam("id") int id) throws SQLException {
	
		PreparedStatement query = null;
		Connection conn = null;
		
		ToJSON converter = new ToJSON();
		JSONObject json;
		
		try {
			conn = MySqlCustomersConnection(); //inherited from MySql_Utils
			query = conn.prepareStatement("SELECT id, name, email, phoneNumber, address, street, city, state, zip "+
	                                       "FROM customers " + 
	                                       "WHERE id = ? ");
			
	        query.setInt(1, id);
	        ResultSet rs = query.executeQuery();
	       
	        json = converter.toJSONObject(rs);
	        query.close();  // close connection
		}
		catch(SQLException sqe) {
			sqe.printStackTrace();
			json = new JSONObject();
		}
		catch (Exception e){
			e.printStackTrace();
			json = new JSONObject();
		}
		finally {
			if (conn != null){
				conn.close();
			}
		}
	
	    return json;
	}
	
	/**
	 * Insert a row into the customers table.
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public Response insertIntoCustomers(JSONObject customerData)  throws SQLException{
		ResponseBuilder builder=new ResponseBuilderImpl();
		Connection conn = null;
		try {
			/*
			 * Validate data here before starting to insert into the database.
			 * 
			 */
			
		    conn =  MySqlCustomersConnection(); //inherited from MySql_Utils
			PreparedStatement query = conn.prepareStatement( "INSERT INTO customers " + 
					"(name, email, phoneNumber, address, street, city, state, zip) " + 
					"VALUES (?, ?, ?, ?, ?, ?, ?, ?) ");
		  
			query.setString(1, customerData.optString("name"));
			query.setString(2, customerData.optString("email"));
			query.setString(3, customerData.optString("phoneNumber"));
			query.setString(4, customerData.optString("address"));
			query.setString(5, customerData.optString("street"));
			query.setString(6, customerData.optString("city"));
			query.setString(7, customerData.optString("state"));
			query.setString(8, customerData.optString("zip"));

			query.executeUpdate();

			builder.status(200);
		} catch(SQLException sqe) {
			sqe.printStackTrace();
			builder.status(500);
		}
		finally {
			if (conn != null) {
				conn.close();
			}
		}
	    return builder.build();
	}
	

	

	/**
	 * Update an existing customer.
	 * @return 
	 */
	@Path("/{id}") 
	@PUT
	@Consumes(MediaType.APPLICATION_JSON) 
	public Response updateCustomer(@PathParam("id") int id,JSONObject customerData) throws SQLException {
		ResponseBuilder builder=new ResponseBuilderImpl();
		Connection conn = null;
		
		try {
		    conn = MySqlCustomersConnection(); //inherited from MySql_Utils
		    PreparedStatement query = conn.prepareStatement("UPDATE customers " +
										  "SET name = ? " +
										  ", email = ? " +
										  ", phoneNumber = ? " +
										  ", street = ? " +
										  ", city = ? " +
										  ", state = ?" +
										  ", zip  = ? " +
	                                      "WHERE id = ? ");
			query.setString(1, customerData.optString("name"));
			query.setString(2, customerData.optString("email"));
			query.setString(3, customerData.optString("phoneNumber"));
			
			query.setString(4, customerData.optString("street"));
			query.setString(5, customerData.optString("city"));
			query.setString(6, customerData.optString("state"));
			query.setString(7, customerData.optString("zip"));
			query.setInt(9, id);
				
			query.executeUpdate();

	        query.close();  // close connection
	        
	        builder.status(200);
		}
		catch(SQLException sqe) {
			sqe.printStackTrace();
			builder.status(500);			
		}
		catch (Exception e){
			e.printStackTrace();
			builder.status(500);
		}
		finally {
			if (conn != null){
				conn.close();
			}
		}
	
	   return builder.build();
	}

	/**
	 * Delete a row from the customers table.
	 */
	
	@Path("{id}") 
	@DELETE
	public Response deleteACustomer( @PathParam("id") int id)  throws SQLException
	{
		System.out.println("\nCustomers:deleteACustomer:  " + id );
	                                
	    PreparedStatement query = null;
		Connection conn = null;
		
		try {
			
			/*
			 * Validate before doing the delete
			 */
	       		conn =  MySqlCustomersConnection(); //inherited from MySql_Utils
				query = conn.prepareStatement( "DELETE FROM customers " +
		       		                            "WHERE id =  ? " );
				
				query.setInt(1, id);
				System.out.println("\n Delete query = " + query.toString());
				
				query.executeUpdate();
				
			} catch(SQLException sqe) {
				System.out.println("\n Customers, caught SQLException");
				sqe.printStackTrace();
				ResponseBuilder builder=new ResponseBuilderImpl();
				builder.status(500);
				return builder.build();		
			} catch(Exception e) {
				System.out.println("\n Customers, caught Exception");
				e.printStackTrace();
				ResponseBuilder builder=new ResponseBuilderImpl();
				builder.status(500);
				return builder.build();
			}
		
			finally {
				if (conn != null) {
					conn.close();
				}
		}
		ResponseBuilder builder=new ResponseBuilderImpl();
		builder.status(200);
		return builder.build();
	}
	
}
