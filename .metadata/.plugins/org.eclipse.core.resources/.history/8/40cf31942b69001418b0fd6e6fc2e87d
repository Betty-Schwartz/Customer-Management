package com.schwartz.customerProject.customers;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.Produces;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jettison.json.JSONArray;

import com.schwartz.dao.MySql_Utils;
import com.schwartz.util.ToJSON;


@Path("/v2/customers")
public class V2_customers {
	
 	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response returnSelectCustomer(
			@QueryParam("id") String id) 
			throws Exception{	
		
 		String returnString = null; 		
	    JSONArray json = new JSONArray();
		
		try {
			
			if (id == null){
				return Response.status(400).entity("Error:  please specify customer name for this search").build();
			}
			
			ManageCustomers dao = new ManageCustomers();
			json = dao.queryReturnCustomer(id);
			returnString = json.toString();
		}
		catch (SQLException sqe){
			sqe.printStackTrace();
			return Response.status(500).entity("Server was not able to procss your request").build();
		}
		
		return Response.ok(returnString).build();
		}
		

	/*
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response returnErrorOnName()  throws Exception{
		return Response.status(400).entity("Error:  please specify customer for this search").build();
		
	}
*/
	
	@Path("/{id}") 
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response returnCustomer(
			@PathParam("id") int id) // using part of url string to bring in a variable
	        throws Exception {
		
		String returnString = null;
		
	    JSONArray json = new JSONArray();
	    
	    try {
	    	ManageCustomers dao = new ManageCustomers();
	    	
	    	json = dao.queryReturnCustomer(id);
	    	returnString = json.toString();
	    	
	    }
	    catch (Exception e ){
	    e.printStackTrace();
	    	return Response.status(500).entity("Server was not able to process your request").build();
	    }
	    return Response.ok(returnString).build();
	  
	}
	
	@Path("/allCustomers") 
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response returnAllCustomers() throws Exception{
		
		String returnString = null;
		Connection conn = null;
		PreparedStatement query = null;
		Response rb = null;
		try {
			conn = MySql_Utils.MySqlConn().getConnection();
			query = conn.prepareStatement("select * " +
			                              "from customers");
			ResultSet rs = query.executeQuery();
			ToJSON converter = new ToJSON();
			JSONArray json = new JSONArray();
			
			json = converter.toJSONArray(rs);
			
			query.close(); // close connection
			
			returnString = json.toString();
			
			
	    //  MySql_Utils dao = new MySql_Utils();
	    //  json = dao.returnAllCustomers();
		//	returnString = json.toString();
		  rb = Response.ok(returnString).build();
		}
		catch (SQLException sqe){
			sqe.printStackTrace();
		}
		finally {
			if ( conn != null){
				conn.close();
			}			
		}
		
		return rb;
	}
	
	@POST
	@Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
	@Produces(MediaType.APPLICATION_JSON)
	public Response addCustomer(String customerData) throws Exception{
		String returnString = null; 		
	    JSONArray jsonArray = new JSONArray();
	    ManageCustomers dao = new ManageCustomers();
	    
	    try {
		    System.out.println("New Customer Data: " + customerData);
		    
		    ObjectMapper mapper = new ObjectMapper();
		    CustomerEntry customerEntry = mapper.readValue(customerData, CustomerEntry.class);
		    System.out.println("ManageCustomers:insertIntoCustomers:  " +
		    		            customerEntry.name +", " + 
		    		            customerEntry.email+", " + 
		    		            customerEntry.phoneNumber +", " + 
		    		            customerEntry.address +", " + 
		    		            customerEntry.street +", " + 
		    		            customerEntry.city +", " + 
		    		            customerEntry.state +", " + 
		    		            customerEntry.zip);
		    
		    
		    int http_code = dao.insertIntoCustomers(customerEntry.name, 
		    										customerEntry.email, 
		    										customerEntry.phoneNumber, 
		    										customerEntry.address, 
		    										customerEntry.street, 
		    										customerEntry.city, 
		    										customerEntry.state,
		    										customerEntry.zip);
		    
		    if( http_code == 200 ){
		    	System.out.println("Item has been entered successfully, Version 2");
			    
		    	returnString = "Customer inserted";
		    } else {
		    	return Response.status(500).entity("Unable to process item").build();
		    }
		    
		} catch ( Exception e) {
			e.printStackTrace();
			return Response.status(500).entity("Server was not able to process yur request").build();
		}
	
	    return Response.ok(returnString).build();
		
    }
}

class CustomerEntry {  // /This is a resource class and will be in it's own class and package.
	public String name;
	public String email; 
	public String phoneNumber; 
	public String address;
	public String street; 
	public String city; 
	public String state; 
	public String zip;
}
